// File: Code.gs
/*
 * Apps Script para generaciÃ³n de un Ãºnico PDF con mÃºltiples operarios,
 * con validaciÃ³n de inputs, escape de regex en el patrÃ³n y saneado de nombres de archivo.
 */

const TEMPLATE_ID      = '14PCr1pgbY0HeHrGUv-w5fK_NmdDfntRVzJbLixtY5PE';
const SHEET_ID         = SpreadsheetApp.getActive().getId();
const TARGET_FOLDER_ID = '1BBmVffFm8KQkmgRyqaR04UnqQYOA-bGJ';

function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('Informes PDF')
    .addItem('Generar informe', 'showFilterSidebar')
    .addToUi();
}

function showFilterSidebar() {
  const tpl  = HtmlService.createTemplateFromFile('Sidebar');
  const opts = getFilterOptions();
  tpl.clientes  = opts.clientes;
  tpl.operarios = opts.operarios;
  tpl.semanas   = opts.semanas;

  const htmlOutput = tpl.evaluate().setTitle('Filtros Informe');

  if (
    HtmlService.XFrameOptionsMode &&
    HtmlService.XFrameOptionsMode.DENY != null
  ) {
    htmlOutput.setXFrameOptionsMode(HtmlService.XFrameOptionsMode.DENY);
  }

  SpreadsheetApp.getUi().showSidebar(htmlOutput);
}

function getFilterOptions() {
  const sheet   = SpreadsheetApp.openById(SHEET_ID).getSheetByName('REGISTROS');
  const vals    = sheet.getDataRange().getValues();
  const headers = vals.shift().map(h => h.toString().toUpperCase());
  const iC = headers.indexOf('CLIENTE'),
        iO = headers.indexOf('OPERARIO'),
        iS = headers.indexOf('SEMANA');
  const sC = new Set(), sO = new Set(), sS = new Set();
  vals.forEach(r => {
    if (iC >= 0 && r[iC]) sC.add(r[iC]);
    if (iO >= 0 && r[iO]) sO.add(r[iO]);
    if (iS >= 0 && r[iS]) sS.add(r[iS]);
  });
  return {
    clientes:  Array.from(sC).sort(),
    operarios: Array.from(sO).sort(),
    semanas:   Array.from(sS).map(Number).sort((a, b) => a - b).map(String)
  };
}

function assertValidFilters(filters) {
  const opts = getFilterOptions();
  if (filters.cliente && !opts.clientes.includes(filters.cliente)) {
    throw new Error('Cliente no vÃ¡lido');
  }
  if (filters.semanas) {
    filters.semanas.forEach(s => {
      if (!opts.semanas.includes(s)) {
        throw new Error('Semana no vÃ¡lida: ' + s);
      }
    });
  }
  if (filters.operarios) {
    filters.operarios.forEach(o => {
      if (!opts.operarios.includes(o)) {
        throw new Error('Operario no vÃ¡lido: ' + o);
      }
    });
  }
}

// Solo escapa los metacaracteres del patrÃ³n de bÃºsqueda (la etiqueta {{TAG}})
function escapeForRegex(text) {
  return text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

// Sanear nombres de archivo
function sanitizeFilename(name) {
  return name.replace(/[^a-zA-Z0-9 _-]/g, '').trim();
}

function getFilteredData(filters) {
  const sheet   = SpreadsheetApp.openById(SHEET_ID).getSheetByName('REGISTROS');
  const rows    = sheet.getDataRange().getValues();
  const rawH    = rows.shift();
  const headers = rawH.map(h => h.toString().toUpperCase());
  const iC = headers.indexOf('CLIENTE'),
        iO = headers.indexOf('OPERARIO'),
        iS = headers.indexOf('SEMANA');
  return rows
    .filter(r => {
      let ok = true;
      if (filters.cliente)  ok = ok && String(r[iC]) === filters.cliente;
      if (filters.semanas && filters.semanas.length)
        ok = ok && filters.semanas.includes(String(r[iS]));
      if (filters.operarios && filters.operarios.length)
        ok = ok && filters.operarios.includes(String(r[iO]));
      return ok;
    })
    .map(r => {
      const obj = {};
      rawH.forEach((h,i) => obj[h.toString().replace(/\s+/g,'_')] = r[i]);
      obj.FECHA        = parseDate(obj.FECHA);
      obj.HORA_ENTRADA = parseTime(obj.HORA_ENTRADA);
      obj.HORA_SALIDA  = parseTime(obj.HORA_SALIDA);
      obj['NÂº_HORAS']  = calcHoursDiff(obj.HORA_ENTRADA, obj.HORA_SALIDA);
      return obj;
    });
}

function parseDate(v) {
  if (v instanceof Date) return v;
  const d = new Date(v);
  return isNaN(d)? null : d;
}

function parseTime(v) {
  if (v instanceof Date) {
    return Utilities.formatDate(v, Session.getScriptTimeZone(), 'HH:mm');
  }
  if (typeof v==='string' && /^\d{1,2}:\d{2}/.test(v)) {
    return v;
  }
  return null;
}

function calcHoursDiff(hEntry, hExit) {
  if (!hEntry || !hExit) return '';
  const [h1,m1] = hEntry.split(':').map(Number),
        [h2,m2] = hExit.split(':').map(Number);
  let diff = (h2*60 + m2) - (h1*60 + m1);
  if (diff < 0) diff += 24*60;
  return (diff/60).toFixed(2);
}

function generateReport(filters) {
  assertValidFilters(filters);

  const ui = SpreadsheetApp.getUi();
  ui.alert('ðŸš€ Generando informe Ãºnico...');

  const items = getFilteredData(filters);
  if (!items.length) return ui.alert('No se encontraron registros.');

  items.sort((a, b) => a.FECHA - b.FECHA);

  const folder = DriveApp.getFolderById(TARGET_FOLDER_ID);
  const copy   = DriveApp.getFileById(TEMPLATE_ID).makeCopy();
  const doc    = DocumentApp.openById(copy.getId());
  const body   = doc.getBody();

  // Rellenar campos generales
  const general = items[0];
  Object.keys(general).forEach(key => {
    const tag = `{{${key.toUpperCase()}}}`;
    let val = general[key] || '';
    if (key.toUpperCase().includes('FECHA') && val instanceof Date) {
      val = Utilities.formatDate(val, Session.getScriptTimeZone(), 'dd/MM/yyyy');
    }
    // -> aquÃ­ usamos el valor tal cual, sin escape de regex
    body.replaceText(
      escapeForRegex(tag),
      String(val)
    );
  });

  // Rellenar tabla de tÃ©cnicos
  let techTable;
  body.getTables().some(t => {
    if (t.getRow(1).getText().includes('{{OPERARIO_1}}')) {
      techTable = t; return true;
    }
  });
  if (techTable) {
    items.forEach((it, idx) => {
      const row = idx + 1;
      const f = it.FECHA instanceof Date
              ? Utilities.formatDate(it.FECHA, Session.getScriptTimeZone(), 'dd/MM/yyyy')
              : '';
      techTable.getCell(row,0).setText(f);
      techTable.getCell(row,1).setText(it.OPERARIO || '');
      techTable.getCell(row,2).setText(it.HORA_ENTRADA || '');
      techTable.getCell(row,3).setText(it.HORA_SALIDA  || '');
      techTable.getCell(row,4).setText(it['NÂº_HORAS'] || '');
      techTable.getCell(row,5).setText(it.TIPO_DE_HORA || '');
      techTable.getCell(row,6).setText(it.PRECIO_UNITARIO || '');
      techTable.getCell(row,7).setText(it.IMPORTE || '');
    });
    while (techTable.getNumRows() > items.length + 1) {
      techTable.removeRow(techTable.getNumRows() - 1);
    }
  }

  doc.saveAndClose();

  // Nombre del PDF
  const isSingleWeek = filters.semanas && filters.semanas.length === 1;
  let filename;
  if (isSingleWeek) {
    filename = `${general.CLIENTE}_Semana${filters.semanas[0]}`;
  } else {
    const MONTH_ABB = ['Ene','Feb','Mar','Abr','May','Jun','Jul','Ago','Sep','Oct','Nov','Dic'];
    const month     = general.FECHA instanceof Date
                    ? MONTH_ABB[general.FECHA.getMonth()]
                    : '';
    filename = `${general.CLIENTE}_${general.OPERARIO}_${month}`;
  }
  filename = sanitizeFilename(filename) + '.pdf';

  const pdf = copy.getAs('application/pdf').setName(filename);
  folder.createFile(pdf);
  ui.alert(`âœ” Informe "${filename}" generado y guardado en Drive.`);
}

function onFormSubmit(e) {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName('REGISTROS');
  const headers = sheet.getRange(1,1,1,sheet.getLastColumn())
                       .getValues()[0]
                       .map(h=>h.toString().toUpperCase());
  const col = headers.indexOf('FECHA ENVIO');
  if (col < 0) return;
  const row = sheet.getLastRow();
  sheet.getRange(row, col + 1).setValue(new Date());
}

function include(name) {
  return HtmlService.createHtmlOutputFromFile(name).getContent();
}
